#include "poemesh.bt"


byte version;
BBox bbox;


if(version >= 9) {
    short unk1;
    short unk2;
    short unk3;

    Model model;
    
    //if(version >= 14) uint unk4[model.meshCount];
    
    struct {
        ushort unk1;
        if(version >= 10) ushort unk2;
        if(version >= 12) ushort unk3;
        BBox bbox;
    } modelMeshData[model.shapeCount];
    
    Model groundModel;



} else {
    short shapeCount;
    int vertCount;
    int triCount;
    short numUnk;
    int numGroundVerts;
    int numGroundIdx;
    byte flags;
    byte zero;

    if (version == 8) {
        int unk;
    }

    struct {
        short idx;
        BBox bbox;
        uint shapeOffset;
        uint shapeLength;
    } shapes[shapeCount];



    Vert20 verts(version)[vertCount] <optimize=false>;
    
    
    if(vertCount > 65535) {
        uint idx[triCount * 3] <bgcolor=cDkAqua>;
    } else {
        ushort idx[triCount * 3] <bgcolor=cDkAqua>;
    }

}

