#include "poemesh.bt"

typedef struct {
    uint nameOffset;
    uint matOffset;
    local wstring name;
    local wstring material;
} ShapeInfo9 <read=ShapeInfo9Read>;

string ShapeInfo9Read(ShapeInfo9& s) {
    return s.name + " " + s.material;
}

typedef struct {
    uint nameOffset;
    uint matOffset;
    uint triOffset;
    local wstring name;
    local wstring material;
} ShapeInfo <read=ShapeInfoRead>;

string ShapeInfoRead(ShapeInfo& s) {
    string str;
    SPrintf(str, "%s %s %d", s.name, s.material, s.triOffset);
    return str;
}

struct Unk1{
    ubyte unk[6];
};




byte version;

if(version < 9) {
    int triCount <bgcolor=cBlue>;
    int vertCount <bgcolor=cBlue>;
}
ushort shapeCount;
byte unk1Count;
ushort unk2Count;
byte unk3Count;
float bbox[6] <bgcolor=cDkRed>;

//Assert(idxCount == triCount * 3);




if(version == 9) {
    Model model;
    ShapeInfo9 shapes[shapeCount] <optimize=false>;
} else {  
    if(version == 8) {
        int unk2;
    };
    
    ShapeInfo shapes[shapeCount] <optimize=false>;
    Unk1 unk1[unk1Count];

    if(vertCount > 65535) uint idx[triCount*3] <bgcolor=cDkAqua>;
    else ushort idx[triCount*3] <bgcolor=cDkAqua>;
    
    struct {
        float x <bgcolor=cDkRed>;
        float y <bgcolor=cDkRed>;
        float z <bgcolor=cDkRed>;
        uint64 unk;
        hfloat u <bgcolor=cDkYellow>;
        hfloat v <bgcolor=cDkYellow>;
    } verts[vertCount];

}

if(version == 9) {
    Unk1 unk1[unk1Count];
}

Vector3 unk2[unk2Count];

struct Unk3(int version) {
    byte unk2[45];
    if(version >= 3) {
        byte unk3[25];    
    }
    if(version >= 4) {
        byte unk4[8];
    }
    if(version >= 6) {
        byte unk6[5];
    }
    if(version >= 7) {
        byte unk7[4];
    }
};

Unk3 unk3(version)[unk3Count] <optimize=false>;

int nameTableLength;



local int i;
for(i = 0; i < shapeCount; i++) {
    shapes[i].name = ReadWString(FTell() + shapes[i].nameOffset  * 2);
    shapes[i].material = ReadWString(FTell() + shapes[i].matOffset * 2);
}