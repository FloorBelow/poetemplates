typedef struct {
    float x;
    float y;
    float z;
} Vector3 <read=ReadVector3>;

string ReadVector3(Vector3& vec) {
    string str;
    SPrintf(str, "<%7.2f, %7.2f, %7.2f>", vec.x, vec.y, vec.z);
    return str;
}

typedef struct {
    float x1 <bgcolor=cDkRed>;
    float y1 <bgcolor=cDkRed>;
    float z1 <bgcolor=cDkRed>;
    float x2 <bgcolor=cDkRed>;
    float y2 <bgcolor=cDkRed>;
    float z2 <bgcolor=cDkRed>;
} BBox <read=BBoxRead>;

string BBoxRead(BBox& b) {
    string str;
    SPrintf(str, "(%.2f, %.2f, %.2f) (%.2f, %.2f, %.2f)", b.x1, b.y1, b.z1, b.x2, b.y2, b.z2);
    return str;
}

typedef struct (byte version) {
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    int norm;
    //if(version < 9) 
    int tan;
    if(version != 48) { 
        hfloat u <bgcolor=cDkBlue>;
        hfloat v <bgcolor=cDkBlue>;
    }
    if(version == 57) {
        hfloat u2;
        hfloat v2;   
    }
    if (version == 58) {
        int unk;    
    }
    if (version == 60 || version == 61 || version == 62) {
        ubyte b1;
        ubyte b2;
        ubyte b3;
        ubyte b4;
        ubyte w1;
        ubyte w2;
        ubyte w3;
        ubyte w4;
    }
    if (version == 61 || version == 62) {
        int unk;    
    }
    if(version == 120) {
        byte unk2[4];  
    }
    
} Vert <read=VertRead>;

string VertRead(Vert& v) {
    string s;
    SPrintf(s, "%4.2f %4.2f %4.2f    (%.2f %1.2f)", v.x, v.y, v.z, v.u, v.v);
    return s;
}

typedef struct (byte version){
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    int unka;
    if(version < 9) int unkb;
    hfloat u <bgcolor=cDkBlue>;
    hfloat v <bgcolor=cDkBlue>;
} Vert20 <read=Vert20Read>;

string Vert20Read(Vert20& v) {
    string s;
    SPrintf(s, "%4.0f %4.0f %4.0f    (%.2f %1.2f)", v.x, v.y, v.z, v.u, v.v);
    return s;
}

typedef struct {
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    short a;
    short b;
    short c;
    short d;
    hfloat u;
    hfloat v;
} Vert24 <read=Vert24Read>;

string Vert24Read(Vert24& v) {
    string s;
    SPrintf(s, "%4.0f %4.0f %4.0f    (%.2f %1.2f)", v.x, v.y, v.z, v.u, v.v);
    return s;
}

typedef struct {
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    short a;
    short b;
    short c;
    short d;
    short e;
    short f;
    int unk;
} Vert28 <read=Vert28Read>;

string Vert28Read(Vert28& v) {
    string s;
    SPrintf(s, "%4.0f %4.0f %4.0f", v.x, v.y, v.z);
    return s;
}

typedef struct {
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    hfloat a;
    hfloat b;
    hfloat c;
    hfloat d;
    hfloat u;
    hfloat v;
    byte boneIdx[4];
    byte boneWeights[4];
} Vert32 <read=Vert32Read>;

string Vert32Read(Vert32& v) {
    string s;
    SPrintf(s, "%4.0f %4.0f %4.0f | %f %f", v.x, v.y, v.z, v.u, v.v);
    return s;
}


typedef struct {
    float x <bgcolor=cDkGreen>;
    float y <bgcolor=cDkGreen>;
    float z <bgcolor=cDkGreen>;
    hfloat a;
    hfloat b;
    hfloat c;
    hfloat d;
    hfloat u;
    hfloat v;
    hfloat u2;
    hfloat v2;
} Vert57 <read=Vert57Read>;

string Vert57Read(Vert57& v) {
    string s;
    SPrintf(s, "%4.0f %4.0f %4.0f | %f %f", v.x, v.y, v.z, v.u, v.v);
    return s;
}

struct Mesh(int format, int triCount, int vertCount, int shapeCount) {
    struct {
        int start;
        int length;
    }shapes[shapeCount] <bgcolor=cDkPurple>;
    if(vertCount > 65535) uint idx[triCount * 3];
    else ushort idx[triCount * 3] <bgcolor=cDkAqua>;
    Vert verts(format)[vertCount];
    if(format == 120) {
        struct {
            BBox bbox;
            int unk1;
            int unk2;
            int zero;
        } shapes2[shapeCount] <bgcolor=cDkPurple>;
    }
};


struct Model {
    char magic[4];
    Assert(magic == "DOLm");
    short version;
    byte meshCount;
    short shapeCount;
    int format;

    struct {
        int triCount;
        int vertCount;
    } meshData[meshCount];

    local int i;
    for(i = 0; i < meshCount; i++) {
        Mesh mesh(format, meshData[i].triCount, meshData[i].vertCount, shapeCount);
    }
    
    if (version == 4) {
        int unk[meshCount];
    }
    //struct (int version, int ground){
    //    short a;
    //    if(version >= 13 && ground == 0) int b;
    //    else if(version >= 10 && ground == 0) short b;
    //    float bbox[6] <bgcolor=cDkRed>;
    //} fsbbox(version, ground)[fsCount];
};
