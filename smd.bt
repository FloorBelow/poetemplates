//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "poemesh.bt"

typedef struct {
    uint nameLength;
    uint offset;
    local wstring name;
} ShapeInfo <read=ShapeInfoRead>;

string ShapeInfoRead(ShapeInfo& s) {
    return s.name;
}

byte version;
if(version == 3) {
    byte four;
    ushort shapeCount;
    int unk1;
    float bbox[6];
    Model model;

    uint shapeNameLengths[shapeCount];
    local int i;
    for(i = 0; i < shapeCount; i++) {
        struct {
            char name[shapeNameLengths[i]];
        } shapeNames;
    }
} else {
    uint triCount;
    uint vertCount;
    byte four;
    ushort shapeCount;
    uint shapeNamesLength;
    float bbox[6];
    if(version == 2) uint unk;
    ShapeInfo shapes[shapeCount] <optimize=false>;
    local int i;
    for(i = 0; i < shapeCount; i++) {
        shapes[i].name = ReadWString(FTell(), shapes[i].nameLength / 2);
        FSkip(shapes[i].nameLength);
   }
    //wchar_t shapeNames[shapeNamesLength/2];

    if(vertCount < 65535) {
        ushort idx[triCount * 3] <bgcolor=cDkAqua>;
    } else {
        uint idx[triCount * 3] <bgcolor=cDkAqua>;
    }
    
    struct {
        float x <bgcolor=cDkRed>;
        float y <bgcolor=cDkRed>;
        float z <bgcolor=cDkRed>;
        uint64 unk1;
        hfloat u <bgcolor=cDkGreen>;
        hfloat v <bgcolor=cDkGreen>;
        ubyte bone0;
        ubyte bone1;
        ubyte bone2;
        ubyte bone3;
        ubyte weight0;
        ubyte weight1;
        ubyte weight2;
        ubyte weight3;
    
    } verts[vertCount];
    

}

